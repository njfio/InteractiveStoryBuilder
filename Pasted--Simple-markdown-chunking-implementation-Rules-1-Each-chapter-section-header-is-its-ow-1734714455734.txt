/**
 * Simple markdown chunking implementation
 * Rules:
 * 1. Each chapter/section header is its own chunk
 * 2. Each paragraph is its own chunk
 * 3. Lists are kept together as one chunk
 * 4. Preview sections are kept together
 */

interface ChunkData {
  headingH1?: string;
  text: string;
  order: number;
}

interface ChunkSettings {
  preserveLists?: boolean;
}

export const parseMarkdown = async (
  markdown: string,
  settings: ChunkSettings = { preserveLists: true }
): Promise<ChunkData[]> => {
  const chunks: ChunkData[] = [];
  let chunkOrder = 0;

  let currentH1: string | undefined;
  let currentChunk: string[] = [];
  let inPreviewSection = false;
  let inList = false;

  const lines = markdown.split('\n');

  const addChunk = () => {
    const text = currentChunk.join('\n').trim();
    if (!text) {
      currentChunk = [];
      return;
    }
    chunks.push({
      headingH1: currentH1,
      text,
      order: chunkOrder++
    });
    currentChunk = [];
  };

  const isHeader = (line: string) => {
    const trimmed = line.trim();
    return trimmed.startsWith('#');
  };

  const isPreviewMarker = (line: string) => line.trim() === "Preview of What's to Come:";

  const isListItem = (line: string) => {
    const trimmed = line.trim();
    return /^[-*+]\s|^\d+\.\s/.test(trimmed);
  };

  const isBlankLine = (line: string) => line.trim() === '';

  const flushCurrentChunk = () => {
    if (currentChunk.length > 0) {
      addChunk();
    }
  };

  for (let i = 0; i < lines.length; i++) {
    const line = lines[i];

    // Handle headers
    if (isHeader(line)) {
      // If we were building any chunk (paragraph, list, preview), flush it
      if (currentChunk.length > 0) {
        flushCurrentChunk();
        inPreviewSection = false;
        inList = false;
      }

      // Update currentH1 if it's a top-level heading
      const trimmed = line.trim();
      if (trimmed.startsWith('# ')) {
        currentH1 = trimmed.substring(2);
      }

      // Header is its own chunk
      currentChunk.push(line);
      flushCurrentChunk();
      continue;
    }

    // Handle preview section start
    if (isPreviewMarker(line)) {
      // If something else was in progress, flush it
      if (currentChunk.length > 0) {
        flushCurrentChunk();
      }
      inPreviewSection = true;
      currentChunk.push(line);
      continue;
    }

    if (inPreviewSection) {
      // If we are in a preview section, everything goes into currentChunk until next header or end
      // If we encounter a header, that will flush
      currentChunk.push(line);
      // Don't continue yet, because we might still want to catch if next line is a header
      // We'll just keep accumulating until a header flushes it.
      continue;
    }

    // If we're not in preview section:
    if (isListItem(line)) {
      // If we encounter a list item
      if (!inList && currentChunk.length > 0) {
        // We were building a paragraph and now a list starts -> flush paragraph
        flushCurrentChunk();
      }
      inList = true;
      currentChunk.push(line);
    } else {
      // Not a list item
      if (inList) {
        // We were in a list; now this line is either blank or not a list item
        if (isBlankLine(line)) {
          // blank line ends the list chunk
          flushCurrentChunk();
          inList = false;
        } else {
          // A non-blank, non-list line ends the list chunk
          flushCurrentChunk();
          inList = false;

          if (!isBlankLine(line)) {
            // Start a new paragraph chunk with this line
            currentChunk.push(line);
          }
        }
      } else {
        // Just a normal paragraph line
        if (isBlankLine(line)) {
          // blank line ends the paragraph chunk
          flushCurrentChunk();
        } else {
          // add line to paragraph
          currentChunk.push(line);
        }
      }
    }
  }

  // End of file: flush what's left
  if (currentChunk.length > 0) {
    flushCurrentChunk();
  }

  return chunks;
};